package it.polimi.ingsw.server.model.gameitems.cardstack;

import it.polimi.ingsw.server.model.gameitems.GameItemsManager;
import it.polimi.ingsw.server.model.gameitems.developmentcard.DevelopmentCard;
import it.polimi.ingsw.server.model.gameitems.developmentcard.DevelopmentCardLevel;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.List;
import static org.mockito.Mockito.lenient;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class PlayerOwnedDevelopmentCardDeckTest {
    @Mock
    GameItemsManager gameItemsManager;

    // Stubs of Development Cards to be used in Tests
    @Mock
    DevelopmentCard card1;
    @Mock
    DevelopmentCard card2;
    @Mock
    DevelopmentCard card3;
    @Mock
    DevelopmentCard oneMoreTestCard;

    List<DevelopmentCard> testTwoCards;
    List<DevelopmentCard> testThreeCards;

    @BeforeEach
    void setUp() {
        // Declaration of the behaviour of Development Card stubs
        lenient().when(card1.getLevel()).thenReturn(DevelopmentCardLevel.FIRST_LEVEL);
        lenient().when(card2.getLevel()).thenReturn(DevelopmentCardLevel.SECOND_LEVEL);
        lenient().when(card3.getLevel()).thenReturn(DevelopmentCardLevel.THIRD_LEVEL);
        lenient().when(oneMoreTestCard.getLevel()).thenReturn(DevelopmentCardLevel.FIRST_LEVEL);

        // Initialization of two different Development Cards lists
        testTwoCards = new ArrayList<>();
        testTwoCards.add(card1);
        testTwoCards.add(card2);

        testThreeCards = new ArrayList<>();
        testThreeCards.add(card1);
        testThreeCards.add(card2);
        testThreeCards.add(card3);
    }

    /**
     * Tests the initialization of a Development Card Deck owned by a Player.
     * Checks the equality between the Development Card Decks generated by pushing the same elements
     * and the inequality between the ones generated by pushing different elements.
     */
    @Test
    void testInitializeDevelopmentCardDeck() throws ForbiddenPushOnTopException {
        PlayerOwnedDevelopmentCardDeckImp deck1 = new PlayerOwnedDevelopmentCardDeckImp("ID_1", gameItemsManager);
        fillDeck(deck1, testThreeCards);
        List<DevelopmentCard> listThreeCards = new ArrayList<>();
        while(!deck1.isEmpty())
            listThreeCards.add(deck1.pop());

        PlayerOwnedDevelopmentCardDeckImp deck1Copy = new PlayerOwnedDevelopmentCardDeckImp("ID_1Copy", gameItemsManager);
        fillDeck(deck1Copy, testThreeCards);
        List<DevelopmentCard> listThreeCardsCopy = new ArrayList<>();
        while(!deck1Copy.isEmpty())
            listThreeCardsCopy.add(deck1Copy.pop());

        PlayerOwnedDevelopmentCardDeckImp deck2 = new PlayerOwnedDevelopmentCardDeckImp("ID_2", gameItemsManager);
        fillDeck(deck2, testTwoCards);
        List<DevelopmentCard> listTwoCards = new ArrayList<>();
        while(!deck2.isEmpty())
            listTwoCards.add(deck2.pop());

        assertEquals(listThreeCards, listThreeCardsCopy);
        assertNotEquals(listThreeCards, listTwoCards);
    }

    /**
     * Tests the method to get all the Cards which are part of the Deck in the same order.
     * @throws EmptyStackException if this Card Deck is empty
     */
    @Test
    void testPeekAll() throws EmptyStackException, ForbiddenPushOnTopException {
        PlayerOwnedDevelopmentCardDeckImp deckThreeCards = new PlayerOwnedDevelopmentCardDeckImp("ID_1", gameItemsManager);
        fillDeck(deckThreeCards, testThreeCards);
        List<DevelopmentCard> listThreeCards = deckThreeCards.peekAll();
        assertEquals(testThreeCards, listThreeCards);

        PlayerOwnedDevelopmentCardDeckImp deckTwoCards = new PlayerOwnedDevelopmentCardDeckImp("ID_2", gameItemsManager);
        fillDeck(deckTwoCards, testTwoCards);
        List<DevelopmentCard> listTwoCards = deckTwoCards.peekAll();
        assertEquals(testTwoCards, listTwoCards);
    }

    /**
     * Tests the insertion of a Development Card on the top of the Card Deck by the push method
     * and the method to peek this Card.
     * If the push method has a Card with incorrect Level passed as parameter, it must return a ForbiddenPushOnTopException.
     * If the Card Deck is empty and the peek method is invoked, it must return a EmptyStackException.
     * @throws ForbiddenPushOnTopException if the insertion of the Card passed as parameter do not follow
     * one of the rules imposed by the Development Card Deck
     */
    @Test
    void testPushOnTop() throws ForbiddenPushOnTopException {
        PlayerOwnedDevelopmentCardDeckImp deck = new PlayerOwnedDevelopmentCardDeckImp("ID_1", gameItemsManager);
        assertThrows(EmptyStackException.class, deck::peek);

        assertThrows(ForbiddenPushOnTopException.class, () -> deck.pushOnTop(card3));
        assertThrows(ForbiddenPushOnTopException.class, () -> deck.pushOnTop(card2));

        assertThrows(EmptyStackException.class, deck::peek);

        deck.pushOnTop(card1);
        assertEquals(card1, deck.peek());
        assertThrows(ForbiddenPushOnTopException.class, () -> deck.pushOnTop(card3));
        assertEquals(card1, deck.peek());

        deck.pushOnTop(card2);
        assertEquals(card2, deck.peek());

        deck.pushOnTop(card3);
        assertEquals(card3, deck.peek());

        assertThrows(ForbiddenPushOnTopException.class, () -> deck.pushOnTop(card3));
    }

    /**
     * Tests the removal of a Development Card from the top of the Card Deck by the pop method and checks if this method
     * returns the same Development Cards which has just been removed.
     * If the Card Deck is empty and the pop method is invoked, it must return a EmptyStackException.
     * @throws ForbiddenPushOnTopException if the insertion of the Card passed as parameter do not follow
     * one of the rules imposed by the Development Card Deck
     */
    @Test
    void testPop() throws ForbiddenPushOnTopException{
        PlayerOwnedDevelopmentCardDeckImp deck = new PlayerOwnedDevelopmentCardDeckImp("ID_1", gameItemsManager);
        fillDeck(deck, testThreeCards);

        while (!deck.isEmpty())
            deck.pop();
        assertThrows(EmptyStackException.class, deck::pop);

        deck.pushOnTop(oneMoreTestCard);
        assertEquals(oneMoreTestCard, deck.pop());

        deck.pushOnTop(oneMoreTestCard);
        assertEquals(oneMoreTestCard, deck.peek());
        deck.pop();
        assertTrue(deck.isEmpty());
        assertThrows(EmptyStackException.class, deck::peek);
        assertThrows(EmptyStackException.class, deck::pop);
    }

    /**
     * Method to fill the Deck with a specific list of Cards.
     * @param deck PlayerOwnedDevelopmentCardDeck to fill
     * @param testCards Development Cards to insert in the Deck passed as parameter
     * @throws ForbiddenPushOnTopException if the insertion of the Card passed as parameter do not follow
     * one of the rules imposed by the Development Card Deck
     */
    private void fillDeck(PlayerOwnedDevelopmentCardDeck deck, List<DevelopmentCard> testCards)
            throws ForbiddenPushOnTopException {
        for(DevelopmentCard card : testCards)
            deck.pushOnTop(card);
    }

}
