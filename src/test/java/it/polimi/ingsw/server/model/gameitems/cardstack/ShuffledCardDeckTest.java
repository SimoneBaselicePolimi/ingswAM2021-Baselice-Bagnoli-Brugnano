package it.polimi.ingsw.server.model.gameitems.cardstack;

import it.polimi.ingsw.server.model.gameitems.GameItemsManager;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.List;
import java.util.Random;

import static org.junit.jupiter.api.Assertions.*;

class ShuffledCardDeckTest {

    @Mock
    GameItemsManager gameItemsManager;

    List<String> testCards = List.of(
            "card1",
            "card2",
            "card3",
            "card4",
            "card5",
            "card6"
    );

    String oneMoreTestCard = "anotherCard";

    /**
     * Tests Shuffled Card Deck initialization passing to the constructor a specific type of random number generator.
     * Checks the equality between Shuffled Card Decks generated by the same seed (passed to the random number generator)
     * and the inequality between Shuffled Card Decks generated by different seeds.
     */
    @Test
    void testRandomShuffle() {
        ShuffledCardDeck<String> deck1 = new ShuffledCardDeck<>("deckId1", gameItemsManager, new Random(1), testCards);
        List<String> listDeck1 = new ArrayList<>();
        while(!deck1.isEmpty())
            listDeck1.add(deck1.pop());

        ShuffledCardDeck<String> deck1_copy = new ShuffledCardDeck<>("deckId1Copy", gameItemsManager, new Random(1), testCards);
        List<String> listDeck1_copy = new ArrayList<>();
        while(!deck1_copy.isEmpty())
            listDeck1_copy.add(deck1_copy.pop());

        ShuffledCardDeck<String> deck2 = new ShuffledCardDeck<>("deckId2", gameItemsManager, new Random(2), testCards);
        List<String> listDeck2 = new ArrayList<>();
        while(!deck2.isEmpty())
            listDeck2.add(deck2.pop());

        assertEquals(listDeck1, listDeck1_copy);
        assertNotEquals(listDeck1, listDeck2);
    }

    /**
     * Tests the method to get all the Cards which are part of the Deck.
     * Checks if the elements passed as parameter in the constructor of a Shuffled Card Deck are the same of the ones
     * returned by the peek all method, even if they are in different order.
     * @throws EmptyStackException if this Card Deck is empty
     */
    @Test
    void testPeekAll() throws EmptyStackException {
        ShuffledCardDeck<String> deck = new ShuffledCardDeck<>("deckId1", gameItemsManager, testCards);
        List<String> cardsList = deck.peekAll();
        assertTrue(testCards.size() == cardsList.size() &&
                testCards.containsAll(cardsList) && cardsList.containsAll(testCards));
    }

    /**
     * Tests the insertion of a Card (in these tests, represented by a String) on the top of the Card Deck
     * and the method to peek this Card.
     * If the Card Deck is empty and the peek method is invoked, it must return a EmptyStackException.
     * @throws ForbiddenPushOnTopException if the rules imposed by this Deck do not allow this Card to be pushed on the
     * top of this Deck
     */
    @Test
    void testPushOnTop() throws ForbiddenPushOnTopException{
        ShuffledCardDeck<String> deck = new ShuffledCardDeck<>("deckId1", gameItemsManager, new ArrayList<>());
        assertThrows(EmptyStackException.class, deck::peek);

        deck.pushOnTop(oneMoreTestCard);
        assertEquals(oneMoreTestCard, deck.peek());
    }

    /**
     * Tests the removal of a Card (in these tests, represented by a String) from the top of the Card Deck
     * and checks if the pop method returns the same object which has just been removed.
     * If the Card Deck is empty and the pop method is invoked, it must return a EmptyStackException.
     * @throws ForbiddenPushOnTopException if the rules imposed by this Deck do not allow this Card to be pushed on the
     * top of this Deck
     */
    @Test
    void testPop() throws ForbiddenPushOnTopException{
        ShuffledCardDeck<String> deck = new ShuffledCardDeck<>("deckId1", gameItemsManager, testCards);

        deck.pushOnTop(oneMoreTestCard);
        assertEquals(oneMoreTestCard, deck.pop());
        while (!deck.isEmpty())
            deck.pop();
        assertThrows(EmptyStackException.class, deck::pop);

        deck.pushOnTop(oneMoreTestCard);
        assertEquals(oneMoreTestCard, deck.peek());
        deck.pop();
        assertTrue(deck.isEmpty());
        assertThrows(EmptyStackException.class, deck::peek);
        assertThrows(EmptyStackException.class, deck::pop);
    }

}